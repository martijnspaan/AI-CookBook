# AI Cookbook Test Environment - Complete Kubernetes Deployment
# This file contains all resources with Kubernetes best practices applied
# 
# Prerequisites:
# - Kubernetes cluster with RBAC enabled
# - Ingress controller (nginx) installed
# - Prometheus operator (optional, for monitoring)
# - External secret operator (optional, for secret management)
# - Pod Security Standards enabled
#
# Deployment order:
# 1. kubectl apply -f pod-security-test.yaml
# 2. kubectl apply -f resource-quotas-test.yaml
# 3. kubectl apply -f rbac-test.yaml
# 4. kubectl apply -f configmap-test.yaml
# 5. kubectl apply -f secret-test.yaml
# 6. kubectl apply -f api-deployment-test.yaml
# 7. kubectl apply -f web-deployment-test.yaml
# 8. kubectl apply -f api-service-test.yaml
# 9. kubectl apply -f web-service-test.yaml
# 10. kubectl apply -f pod-disruption-budget-test.yaml
# 11. kubectl apply -f hpa-test.yaml
# 12. kubectl apply -f network-policy-test.yaml
# 13. kubectl apply -f ingress-test.yaml
# 14. kubectl apply -f monitoring-test.yaml
# 15. kubectl apply -f backup-test.yaml

---
# Namespace with Pod Security Standards
apiVersion: v1
kind: Namespace
metadata:
  name: ai-cookbook-test
  labels:
    name: ai-cookbook-test
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/environment: test
    # Pod Security Standards
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
  annotations:
    description: "AI Cookbook test environment namespace with restricted pod security"
    contact: "AI Cookbook Team"
    environment: "test"

---
# Resource Quotas and Limits
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ai-cookbook-resource-quota-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: resource-management
    app.kubernetes.io/environment: test
spec:
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    requests.storage: 50Gi
    persistentvolumeclaims: "10"
    pods: "20"
    services: "10"
    secrets: "20"
    configmaps: "20"
    services.loadbalancers: "2"
    services.nodeports: "5"
    replicationcontrollers: "10"
    deployments.apps: "10"
    replicasets.apps: "20"
    statefulsets.apps: "5"
    jobs.batch: "10"
    cronjobs.batch: "5"
    ingresses.networking.k8s.io: "5"
    networkpolicies.networking.k8s.io: "10"

---
apiVersion: v1
kind: LimitRange
metadata:
  name: ai-cookbook-limit-range-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: resource-management
    app.kubernetes.io/environment: test
spec:
  limits:
  - type: Container
    default:
      cpu: "500m"
      memory: "512Mi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
    min:
      cpu: "50m"
      memory: "64Mi"
    max:
      cpu: "2"
      memory: "4Gi"
  - type: Pod
    max:
      cpu: "4"
      memory: "8Gi"
  - type: PersistentVolumeClaim
    min:
      storage: "1Gi"
    max:
      storage: "50Gi"

---
# Service Account and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-cookbook-sa-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: rbac
    app.kubernetes.io/environment: test

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-cookbook-role-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: rbac
    app.kubernetes.io/environment: test
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-cookbook-rolebinding-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: rbac
    app.kubernetes.io/environment: test
subjects:
- kind: ServiceAccount
  name: ai-cookbook-sa-test
  namespace: ai-cookbook-test
roleRef:
  kind: Role
  name: ai-cookbook-role-test
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-cookbook-config-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: config
    app.kubernetes.io/environment: test
  annotations:
    config.kubernetes.io/test-config: "true"
    description: "AI Cookbook test environment application configuration"
data:
  # API Configuration
  API_TITLE: "AI Cookbook API - Test"
  API_VERSION: "v1"
  API_DESCRIPTION: "A minimal API for the AI Cookbook project - Test Environment"
  API_CONTACT_NAME: "AI Cookbook Team"
  API_CONTACT_EMAIL: "contact@aicookbook.com"
  
  # CORS Configuration - Test environment with broader access
  CORS_ALLOWED_ORIGINS: "https://ai-cookbook-test.westeurope.cloudapp.azure.com,https://k8s-ai-cookbook-dns-e3byex43.hcp.westeurope.azmk8s.io,http://localhost:4200,http://localhost:3000,http://localhost:8080"
  CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOWED_HEADERS: "Content-Type,Authorization,X-Requested-With,Accept,Origin"
  CORS_ALLOW_CREDENTIALS: "true"
  CORS_MAX_AGE: "3600"
  
  # Swagger Configuration
  SWAGGER_ENABLED: "true"
  SWAGGER_ROUTE_PREFIX: ""
  SWAGGER_DOCUMENT_TITLE: "AI Cookbook API Documentation - Test"
  
  # Recipes Configuration
  RECIPES_PATH: "recipes"
  
  # CosmosDB Configuration - Test environment
  COSMOSDB_DATABASE_NAME: "CookBookTest"
  COSMOSDB_CONTAINER_NAME: "Recipes"
  COSMOSDB_WEEK_MENU_CONTAINER_NAME: "WeekMenu"
  COSMOSDB_COOKBOOK_CONTAINER_NAME: "Cookbooks"
  COSMOSDB_GROCERY_LIST_CONTAINER_NAME: "GroceryLists"
  COSMOSDB_PARTITION_KEY_PATH: "/id"
  COSMOSDB_THROUGHPUT: "400"
  COSMOSDB_CREATE_IF_NOT_EXISTS: "true"
  
  # Health Check Configuration
  HEALTH_CHECK_ENABLED: "true"
  HEALTH_CHECK_PATH: "/health"
  HEALTH_CHECK_INTERVAL: "30s"
  
  # Logging Configuration - More verbose for test
  LOG_LEVEL: "Debug"
  LOG_FORMAT: "json"
  
  # Test Environment Specific
  ASPNETCORE_ENVIRONMENT: "Test"
  ASPNETCORE_URLS: "http://+:4201"

---
# Secret (WARNING: Replace with external secret management in production)
apiVersion: v1
kind: Secret
metadata:
  name: ai-cookbook-secrets-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: secrets
    app.kubernetes.io/environment: test
  annotations:
    description: "AI Cookbook test environment application secrets"
    # This should be replaced with external secret management in production
    secret.kubernetes.io/managed-by: "external-secrets"
type: Opaque
data:
  # Base64 encoded values - replace with your actual test environment values
  # To encode: echo -n "your-value" | base64
  # WARNING: This is for test environment only. In production, use external secret management
  COSMOSDB_CONNECTION_STRING: "QWNjb3VudEVuZHBvaW50PWh0dHBzOi8vY29zbW9zLWFpLWNvb2tib29rLmRvY3VtZW50cy5henVyZS5jb206NDQzLztBY2NvdW50S2V5PTA3ZXRhR05TVW8zU0VKUTBPYnFNM0dxRXAzN1l0VUlwbXBGaEZPU3BuYnZQZnpmYndmNDdtWVdZbmp5MkNPeHpVTXh1NUEwbHlxcFBBQ0RiRm9PcDF3PT0="
  # Add additional test environment secrets as needed
  # JWT_SECRET: ""
  # API_KEY: ""

---
# TLS Secret (Replace with actual certificate)
apiVersion: v1
kind: Secret
metadata:
  name: ai-cookbook-tls-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: tls
    app.kubernetes.io/environment: test
  annotations:
    description: "TLS certificate for AI Cookbook test environment ingress"
type: kubernetes.io/tls
data:
  # Replace with your actual base64 encoded certificate and key for test environment
  # To generate: kubectl create secret tls ai-cookbook-tls-test --cert=path/to/cert.pem --key=path/to/key.pem --dry-run=client -o yaml
  # For test environment, you might use a self-signed certificate or Let's Encrypt
  tls.crt: ""  # Base64 encoded certificate
  tls.key: ""  # Base64 encoded private key
