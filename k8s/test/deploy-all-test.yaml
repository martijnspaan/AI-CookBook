# AI Cookbook Test Environment Kubernetes Deployment
# This file contains all resources needed for a complete test environment deployment
# Apply in order: kubectl apply -f deploy-all-test.yaml
# 
# Prerequisites:
# - Kubernetes cluster with RBAC enabled
# - Ingress controller (nginx) installed
# - Prometheus operator (optional, for monitoring)
# - External secret operator (optional, for secret management)

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: ai-cookbook-test
  labels:
    name: ai-cookbook-test
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/environment: test
  annotations:
    description: "AI Cookbook test environment namespace"
    contact: "AI Cookbook Team"
    environment: "test"

---
# Service Account and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-cookbook-sa-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: rbac
    app.kubernetes.io/environment: test

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ai-cookbook-role-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: rbac
    app.kubernetes.io/environment: test
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ai-cookbook-rolebinding-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: rbac
    app.kubernetes.io/environment: test
subjects:
- kind: ServiceAccount
  name: ai-cookbook-sa-test
  namespace: ai-cookbook-test
roleRef:
  kind: Role
  name: ai-cookbook-role-test
  apiGroup: rbac.authorization.k8s.io

---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-cookbook-config-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: config
    app.kubernetes.io/environment: test
  annotations:
    config.kubernetes.io/test-config: "true"
    description: "AI Cookbook test environment application configuration"
data:
  # API Configuration
  API_TITLE: "AI Cookbook API - Test"
  API_VERSION: "v1"
  API_DESCRIPTION: "A minimal API for the AI Cookbook project - Test Environment"
  API_CONTACT_NAME: "AI Cookbook Team"
  API_CONTACT_EMAIL: "contact@aicookbook.com"
  
  # CORS Configuration - Test environment with broader access
  CORS_ALLOWED_ORIGINS: "https://ai-cookbook-test.westeurope.cloudapp.azure.com,https://k8s-ai-cookbook-dns-e3byex43.hcp.westeurope.azmk8s.io,http://localhost:4200,http://localhost:3000,http://localhost:8080"
  CORS_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOWED_HEADERS: "Content-Type,Authorization,X-Requested-With,Accept,Origin"
  CORS_ALLOW_CREDENTIALS: "true"
  CORS_MAX_AGE: "3600"
  
  # Swagger Configuration
  SWAGGER_ENABLED: "true"
  SWAGGER_ROUTE_PREFIX: ""
  SWAGGER_DOCUMENT_TITLE: "AI Cookbook API Documentation - Test"
  
  # Recipes Configuration
  RECIPES_PATH: "recipes"
  
  # CosmosDB Configuration - Test environment
  COSMOSDB_DATABASE_NAME: "CookBookTest"
  COSMOSDB_CONTAINER_NAME: "Recipes"
  COSMOSDB_WEEK_MENU_CONTAINER_NAME: "WeekMenu"
  COSMOSDB_COOKBOOK_CONTAINER_NAME: "Cookbooks"
  COSMOSDB_GROCERY_LIST_CONTAINER_NAME: "GroceryLists"
  COSMOSDB_PARTITION_KEY_PATH: "/id"
  COSMOSDB_THROUGHPUT: "400"
  COSMOSDB_CREATE_IF_NOT_EXISTS: "true"
  
  # Health Check Configuration
  HEALTH_CHECK_ENABLED: "true"
  HEALTH_CHECK_PATH: "/health"
  HEALTH_CHECK_INTERVAL: "30s"
  
  # Logging Configuration - More verbose for test
  LOG_LEVEL: "Debug"
  LOG_FORMAT: "json"
  
  # Test Environment Specific
  ASPNETCORE_ENVIRONMENT: "Test"
  ASPNETCORE_URLS: "http://+:4201"

---
# Secret (WARNING: Replace with external secret management in production)
apiVersion: v1
kind: Secret
metadata:
  name: ai-cookbook-secrets-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: secrets
    app.kubernetes.io/environment: test
  annotations:
    description: "AI Cookbook test environment application secrets"
    # This should be replaced with external secret management in production
    secret.kubernetes.io/managed-by: "external-secrets"
type: Opaque
data:
  # Base64 encoded values - replace with your actual test environment values
  # To encode: echo -n "your-value" | base64
  # WARNING: This is for test environment only. In production, use external secret management
  COSMOSDB_CONNECTION_STRING: "QWNjb3VudEVuZHBvaW50PWh0dHBzOi8vY29zbW9zLWFpLWNvb2tib29rLmRvY3VtZW50cy5henVyZS5jb206NDQzLztBY2NvdW50S2V5PTA3ZXRhR05TVW8zU0VKUTBPYnFNM0dxRXAzN1l0VUlwbXBGaEZPU3BuYnZQZnpmYndmNDdtWVdZbmp5MkNPeHpVTXh1NUEwbHlxcFBBQ0RiRm9PcDF3PT0="
  # Add additional test environment secrets as needed
  # JWT_SECRET: ""
  # API_KEY: ""

---
# TLS Secret (Replace with actual certificate)
apiVersion: v1
kind: Secret
metadata:
  name: ai-cookbook-tls-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: tls
    app.kubernetes.io/environment: test
  annotations:
    description: "TLS certificate for AI Cookbook test environment ingress"
type: kubernetes.io/tls
data:
  # Replace with your actual base64 encoded certificate and key for test environment
  # To generate: kubectl create secret tls ai-cookbook-tls-test --cert=path/to/cert.pem --key=path/to/key.pem --dry-run=client -o yaml
  # For test environment, you might use a self-signed certificate or Let's Encrypt
  tls.crt: ""  # Base64 encoded certificate
  tls.key: ""  # Base64 encoded private key

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment-test
  namespace: ai-cookbook-test
  labels:
    app: api
    app.kubernetes.io/name: ai-cookbook-api
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: api
    app.kubernetes.io/environment: test
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: api
      app.kubernetes.io/name: ai-cookbook-api
      app.kubernetes.io/environment: test
  template:
    metadata:
      labels:
        app: api
        app.kubernetes.io/name: ai-cookbook-api
        app.kubernetes.io/part-of: ai-cookbook
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: api
        app.kubernetes.io/environment: test
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4201"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-cookbook-sa-test
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: api
        image: ai-cookbook-api:1.0.0-test
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 4201
          protocol: TCP
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Test"
        - name: ASPNETCORE_URLS
          value: "http://+:4201"
        envFrom:
        - configMapRef:
            name: ai-cookbook-config-test
        - secretRef:
            name: ai-cookbook-secrets-test
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: 4201
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 4201
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-tmp
          mountPath: /var/tmp
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api
                - key: app.kubernetes.io/environment
                  operator: In
                  values:
                  - test
              topologyKey: kubernetes.io/hostname

---
# Web Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment-test
  namespace: ai-cookbook-test
  labels:
    app: web
    app.kubernetes.io/name: ai-cookbook-web
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: web
    app.kubernetes.io/environment: test
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: web
      app.kubernetes.io/name: ai-cookbook-web
      app.kubernetes.io/environment: test
  template:
    metadata:
      labels:
        app: web
        app.kubernetes.io/name: ai-cookbook-web
        app.kubernetes.io/part-of: ai-cookbook
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: web
        app.kubernetes.io/environment: test
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4200"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ai-cookbook-sa-test
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: web
        image: ai-cookbook-web:1.0.0-test
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 4200
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /
            port: 4200
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /
            port: 4200
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-tmp
          mountPath: /var/tmp
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - web
                - key: app.kubernetes.io/environment
                  operator: In
                  values:
                  - test
              topologyKey: kubernetes.io/hostname

---
# Pod Disruption Budgets
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-pdb-test
  namespace: ai-cookbook-test
  labels:
    app: api
    app.kubernetes.io/name: ai-cookbook-api
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: api
    app.kubernetes.io/environment: test
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: api
      app.kubernetes.io/name: ai-cookbook-api
      app.kubernetes.io/environment: test

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: web-pdb-test
  namespace: ai-cookbook-test
  labels:
    app: web
    app.kubernetes.io/name: ai-cookbook-web
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: web
    app.kubernetes.io/environment: test
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: web
      app.kubernetes.io/name: ai-cookbook-web
      app.kubernetes.io/environment: test

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: api-service-test
  namespace: ai-cookbook-test
  labels:
    app: api
    app.kubernetes.io/name: ai-cookbook-api
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: api
    app.kubernetes.io/environment: test
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    service.beta.kubernetes.io/azure-load-balancer-backend-protocol: "http"
spec:
  selector:
    app: api
    app.kubernetes.io/name: ai-cookbook-api
    app.kubernetes.io/environment: test
  ports:
  - name: http
    port: 4201
    targetPort: 4201
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: web-service-test
  namespace: ai-cookbook-test
  labels:
    app: web
    app.kubernetes.io/name: ai-cookbook-web
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: web
    app.kubernetes.io/environment: test
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    service.beta.kubernetes.io/azure-load-balancer-backend-protocol: "http"
spec:
  selector:
    app: web
    app.kubernetes.io/name: ai-cookbook-web
    app.kubernetes.io/environment: test
  ports:
  - name: http
    port: 4200
    targetPort: 4200
    protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ai-cookbook-ingress-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: ingress
    app.kubernetes.io/environment: test
  annotations:
    # Azure specific annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    
    # CORS Configuration for test environment
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://ai-cookbook-test.westeurope.cloudapp.azure.com,https://k8s-ai-cookbook-dns-e3byex43.hcp.westeurope.azmk8s.io,http://localhost:4200,http://localhost:3000,http://localhost:8080"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET,POST,PUT,DELETE,OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type,Authorization,X-Requested-With,Accept,Origin"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "3600"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "20"
    nginx.ingress.kubernetes.io/rate-limit-requests: "200"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';";
    
    # SSL Configuration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384"
    
    # Health Check
    nginx.ingress.kubernetes.io/health-check-path: "/health"
    nginx.ingress.kubernetes.io/health-check-interval: "30s"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
    
    # Client Body Size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Azure specific annotations for load balancer
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    service.beta.kubernetes.io/azure-load-balancer-backend-protocol: "http"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - ai-cookbook-test.westeurope.cloudapp.azure.com
    - k8s-ai-cookbook-dns-e3byex43.hcp.westeurope.azmk8s.io
    secretName: ai-cookbook-tls-test
  rules:
  - host: ai-cookbook-test.westeurope.cloudapp.azure.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-service-test
            port:
              number: 4200
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-service-test
            port:
              number: 4201
  - host: k8s-ai-cookbook-dns-e3byex43.hcp.westeurope.azmk8s.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web-service-test
            port:
              number: 4200
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-service-test
            port:
              number: 4201

---
# Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-cookbook-network-policy-test
  namespace: ai-cookbook-test
  labels:
    app.kubernetes.io/name: ai-cookbook
    app.kubernetes.io/part-of: ai-cookbook
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/environment: test
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: ai-cookbook
      app.kubernetes.io/environment: test
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ai-cookbook-test
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: ai-cookbook
          app.kubernetes.io/environment: test
    ports:
    - protocol: TCP
      port: 4200
    - protocol: TCP
      port: 4201
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 4200
    - protocol: TCP
      port: 4201
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ai-cookbook-test
    ports:
    - protocol: TCP
      port: 4200
    - protocol: TCP
      port: 4201
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
